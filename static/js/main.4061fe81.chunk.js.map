{"version":3,"sources":["features/tasks/getDate.js","features/tasks/TasksPage/localStorageData.js","features/tasks/TasksPage/tasksSlice.js","features/tasks/getRandomTask.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","common/Nav/styled.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/styledButtons.js","features/tasks/TasksPage/TaskHandlingButtons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/index.js","common/Nav/index.js","features/tasks/SingleTaskPage/styled.js","features/tasks/SingleTaskPage/index.js","App.js","GlobalStyle.js","serviceWorker.js","features/tasks/TasksPage/getExampleTasks.js","features/tasks/TasksPage/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["getDate","Date","toLocaleDateString","setLocalStorageData","tasks","hideDone","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","isExampleTaskLoading","reducers","addTask","task","payload","push","removeTask","taskID","index","findIndex","id","splice","toggleTaskDone","done","toggleHideDone","state","setEachDone","fetchExampleTasks","addExampleTasks","exampleTasks","pushRandomTask","maxNumber","length","Math","floor","random","find","error","outOfExamples","date","saveDataToLocal","changeTaskDetail","detail","detailContent","changeTaskContent","content","taskContent","actions","selectTasksState","selectTasks","selectHideDone","selectIsExampleTaskLoading","selectIsOutOfExamples","selectIsEveryDone","every","selectIsNoneDone","selectAreTasks","StyledForm","styled","form","Button","button","Input","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","inputFocus","current","focus","onSubmit","event","preventDefault","trimmedTaskContent","trim","nanoid","autoFocus","type","placeholder","ref","value","onChange","target","NavigationBar","div","NavigationItem","li","StyledNavLink","NavLink","attrs","activeClassName","css","List","ul","ListItem","hidden","check","remove","edit","Span","span","TaskList","search","useLocation","query","URLSearchParams","get","useSelector","filter","toUpperCase","includes","selectTaskByQuery","map","key","onClick","className","to","class","ButtonsBox","Buttons","isEveryDone","isNoneDone","disabled","StyledSection","section","Header","Title","h2","TasksWrapper","Section","title","body","extraContent","StyledTitle","h1","StyledFooter","footer","Footer","Wrapper","Container","children","ExampleTasksButton","loading","Search","location","history","useHistory","searchParams","delete","set","pathname","toString","Tasks","areTasks","Author","Nav","TaskHeader","TaskContentForm","ContentInput","EditButton","TaskSpan","TaskDetail","DetailForm","TextArea","textarea","DoneButton","SingleTaskPage","useParams","selectTaskByID","undefined","window","origin","taskDetail","setTaskDetail","setTaskContent","useEffect","onFormSubmit","trimmedTask","document","activeElement","blur","rows","path","exact","GlobalStyle","createGlobalStyle","Boolean","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveToLocalStorageHandler","tasksSaga","call","delay","put","alert","select","takeEvery","rootSaga","all","sagaMiddleWare","createSagaMiddleWare","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4061fe81.chunk.js","sourcesContent":["export const getDate = () => new Date().toLocaleDateString();","const tasksKey = \"tasks\";\r\nconst hideDoneKey = \"hideDone\";\r\n\r\nexport const setLocalStorageData = (tasks, hideDone) => {\r\n    localStorage.setItem(tasksKey, JSON.stringify(tasks))\r\n    localStorage.setItem(hideDoneKey, JSON.stringify(hideDone))\r\n};\r\n\r\nexport const getLocalStorageTasks = () => {\r\n    return (JSON.parse(localStorage.getItem(tasksKey)) || []);\r\n};\r\n\r\nexport const getLocalStorageHideDone = () => {\r\n    return (JSON.parse(localStorage.getItem(hideDoneKey)) || false);\r\n};","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getDate } from '../getDate';\r\nimport { getRandomIndex } from '../getRandomTask';\r\nimport { getLocalStorageHideDone, getLocalStorageTasks, setLocalStorageData } from './localStorageData';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        tasks: getLocalStorageTasks(),\r\n        hideDone: getLocalStorageHideDone(),\r\n        isExampleTaskLoading: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload: task }) => {\r\n            tasks.push(task);\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID)\r\n            tasks.splice(index, 1)\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n            const index = tasks.findIndex(task => task.id === taskID)\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        setEachDone: ({ tasks }) => {\r\n            for (const task of tasks) {\r\n                task.done = true;\r\n            }\r\n        },\r\n        fetchExampleTasks: (state) => {\r\n            state.isExampleTaskLoading = true;\r\n        },\r\n        addExampleTasks: (state, { payload: exampleTasks }) => {\r\n            state.isExampleTaskLoading = false;\r\n            \r\n            const pushRandomTask = () => {\r\n                const index = getRandomIndex(exampleTasks.length);\r\n                if(state.tasks.find(({ id }) => id === exampleTasks[index].id)){\r\n                    try {\r\n                        pushRandomTask();\r\n                    } catch(error) {\r\n                        state.outOfExamples = true;\r\n                    }\r\n                } else {\r\n                    state.tasks.push({...exampleTasks[index], date: getDate()});\r\n                }\r\n            }\r\n            pushRandomTask()\r\n        },\r\n        saveDataToLocal: (state) => {\r\n            setLocalStorageData(state.tasks, state.hideDone)\r\n        },\r\n        changeTaskDetail: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(task => task.id === payload.id);\r\n            tasks[index].detail = payload.detailContent;\r\n        },\r\n        changeTaskContent: ({tasks}, {payload}) => {\r\n            const index = tasks.findIndex(task => task.id === payload.id);\r\n            tasks[index].content = payload.taskContent;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { \r\n    addTask,\r\n    removeTask,\r\n    toggleTaskDone, \r\n    toggleHideDone, \r\n    setEachDone, \r\n    fetchExampleTasks,\r\n    addExampleTasks,\r\n    saveDataToLocal,\r\n    changeTaskDetail,\r\n    changeTaskContent\r\n    } = tasksSlice.actions;\r\n\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsExampleTaskLoading = state => selectTasksState(state).isExampleTaskLoading;\r\nexport const selectIsOutOfExamples = state => selectTasksState(state).outOfExamples;\r\nexport const selectIsEveryDone = state => selectTasks(state).every(({done}) => done);\r\nexport const selectIsNoneDone = state => selectTasks(state).every(({done}) => done === false);\r\nexport const selectAreTasks = state => selectTasks(state).length > 0;\r\n\r\nexport const selectTaskByID = (state, taskID) => selectTasks(state).find(({ id }) => id === taskID);\r\n\r\nexport const selectTaskByQuery = (state, query) => {\r\n    if(!query || query.trim() === \"\"){\r\n        return selectTasks(state);\r\n    }\r\n    return selectTasks(state).filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","export const getRandomIndex = (maxNumber) => {\r\n    return Math.floor(Math.random() * Math.floor(maxNumber));\r\n}","import styled from 'styled-components';\r\n\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px 20px;\r\n    margin: 5px;\r\n    background-color: teal;\r\n    border: none;\r\n    color: white;\r\n    font-size: 16px;\r\n    transition: .3s;\r\n    align-self: flex-start;\r\n    \r\n    &:hover {\r\n    cursor: pointer;\r\n    color: #ddd;\r\n    transform: scale(1.05)\r\n    }\r\n\r\n    &:active {\r\n    color: black;\r\n    outline: none;\r\n    }\r\n    &:disabled {\r\n        display: none;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        padding: 10px;\r\n        font-size: 14px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    flex-grow: 1;\r\n    margin: 5px;\r\n    padding: 5px 5px 5px 10px;\r\n\r\n    @media (max-width: 330px) {\r\n        &::placeholder {\r\n            font-size: 14px;\r\n        }\r\n    }\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n    }\r\n`;","import React, { useState, useRef} from \"react\"\r\nimport { nanoid } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTask } from '../tasksSlice';\r\nimport { StyledForm, Button } from './styled';\r\nimport { getDate } from \"../../getDate\";\r\nimport { Input } from \"../Input\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedTaskContent = newTaskContent.trim();\r\n        \r\n        if (trimmedTaskContent === \"\"){\r\n            return\r\n        };\r\n        dispatch(addTask({\r\n            content: trimmedTaskContent,\r\n            done: false,\r\n            date: getDate(),\r\n            detail: \"\",\r\n            id: nanoid(),\r\n        }))\r\n        setNewTaskContent(\"\");\r\n        inputFocus();\r\n    };\r\n    const changeNewTaskContent = (event) => {\r\n        setNewTaskContent(event.target.value)\r\n    };\r\n    const inputFocus = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return <StyledForm\r\n        onSubmit={onFormSubmit}\r\n    >\r\n        <Input\r\n            autoFocus\r\n            type=\"text\"\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            ref={inputRef}\r\n            value={newTaskContent}\r\n            onChange={changeNewTaskContent}\r\n        />\r\n        <Button\r\n        >\r\n            Dodaj zadanie\r\n        </Button>\r\n    </StyledForm>\r\n};\r\n\r\nexport default Form;","import styled, { css } from 'styled-components';\r\nimport {\r\n    NavLink\r\n} from 'react-router-dom';\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const NavigationBar = styled.div `\r\n    background-color: white;\r\n    width: 100%;\r\n    height: 8vh;\r\n    margin: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    list-style: none;\r\n`;\r\nexport const NavigationItem = styled.li `\r\n    margin: 10px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n\r\n    &.${activeClassName} {\r\n        border-bottom: solid 2px hsl(180, 66%, 20%);\r\n    }\r\n    color: black;\r\n    text-decoration: none;\r\n    \r\n    ${({button}) => !button && css`\r\n        color: hsl(180, 66%, 20%);\r\n        text-decoration: none;\r\n        font-size: 18px;\r\n        padding: 10px 10px 5px 10px;\r\n        transition: .3s ease;\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(1.5)\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n    }\r\n`;","import styled, { css } from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n    padding: 15px;\r\n    margin: 0;\r\n    list-style: none;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 5px;\r\n    }\r\n`;\r\n\r\nexport const ListItem = styled.ul`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 15px 10px;\r\n    margin: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 35px;\r\n    align-self: center;\r\n    height: 35px;\r\n    padding: 10px;\r\n    display: flex;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: none;\r\n    outline: none;\r\n    transition: .3s;\r\n\r\n    @media (max-width: 768px) {\r\n        width: 25px;\r\n        height: 25px;\r\n        font-size: 10px;\r\n    }\r\n\r\n    &:focus {\r\n    outline: solid black 1px;\r\n    }\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        filter: brightness(1.2)\r\n    }\r\n\r\n    ${({check}) => check && css`\r\n        background-color: rgb(5, 104, 10);\r\n\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: rgb(104, 5, 5);\r\n\r\n        @media (max-width: 400px) {\r\n            font-size: 12px;\r\n        }\r\n    `}\r\n    ${({edit}) => edit && css`\r\n        background-color: rgb(233, 199, 1);\r\n        margin-right: 5px;\r\n\r\n        @media (max-width: 400px) {\r\n            font-size: 12px;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    text-align: justify;\r\n    padding: 5px 20px;\r\n    flex-grow: 1;\r\n    line-break: anywhere;\r\n    font-style: normal;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n        font-style: italic;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { StyledNavLink } from \"../../../../common/Nav/styled\";\r\nimport { removeTask, toggleTaskDone, selectTasks, selectHideDone, selectTaskByQuery } from '../tasksSlice';\r\nimport { List, ListItem, Button, Span } from './styled';\r\n\r\nconst TaskList = () => {\r\n    const dispatch = useDispatch();\r\n    const { search } = useLocation();\r\n    const searchParams = new URLSearchParams(search);\r\n    const query = searchParams.get(\"szukaj\");\r\n    const tasks = useSelector(state => selectTaskByQuery(state, query))\r\n    const hideDone = useSelector(selectHideDone);\r\n\r\n\r\n    return  <List>\r\n                {tasks.map((task) => (\r\n                    <ListItem \r\n                        key={task.id}\r\n                        hidden={task.done && hideDone}\r\n                    >\r\n                    <Button \r\n                        check\r\n                        onClick={() => dispatch(toggleTaskDone(task.id))}\r\n                    >\r\n                    {task.done ? <i className=\"fas fa-check\"></i> : \"\"}\r\n                    </Button>\r\n\r\n                    <Span \r\n                        done={task.done}\r\n                    >\r\n                    <StyledNavLink to={`/zadania/${task.id}`}>{task.content}</StyledNavLink>\r\n                    </Span>\r\n\r\n                    <StyledNavLink button to={`/zadania/${task.id}`}><Button edit><i class=\"fas fa-pencil-alt\"></i></Button></StyledNavLink>\r\n\r\n                    <Button \r\n                        remove\r\n                        onClick={() => dispatch(removeTask(task.id))}\r\n                    >\r\n                    <i className=\"fas fa-trash-alt\"></i>\r\n                    </Button>\r\n                    </ListItem>\r\n                ))}\r\n            </List>\r\n};\r\n\r\nexport default TaskList;","import styled from 'styled-components';\r\n\r\nexport const ButtonsBox = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-grow: 1;\r\n    padding: 0px;\r\n    margin: 0 10px;\r\n    border: none;\r\n    background-color: transparent;\r\n    color: hsl(180, 66%, 20%);\r\n    font-size: 18px;\r\n    transition: color .2s, transform .2s;\r\n\r\n    &:hover {\r\n        color: hsl(180, 66%, 40%);\r\n        cursor: pointer;\r\n    }\r\n\r\n    &:active {\r\n        transform: scale(0.9);\r\n        outline: none;\r\n    }\r\n\r\n    &:disabled {\r\n        color: hsl(0, 0%, 60%);\r\n        cursor: auto;\r\n    }\r\n\r\n    &:focus {\r\n        outline: none;\r\n        color: hsl(180, 66%, 40%);\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    @media (max-width: 400px) {\r\n        font-size: 14px;\r\n        padding: 5px;\r\n        margin: 5px;\r\n    }\r\n`;","import React from \"react\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleHideDone, setEachDone, selectTasks, selectHideDone, selectIsEveryDone, selectIsNoneDone} from '../tasksSlice';\r\nimport { ButtonsBox, Button } from '../../styledButtons';\r\n\r\nconst Buttons = () => {\r\n\tconst tasks = useSelector(selectTasks);\r\n\tconst hideDone = useSelector(selectHideDone);\r\n\tconst isEveryDone = useSelector(selectIsEveryDone);\r\n\tconst isNoneDone = useSelector(selectIsNoneDone);\r\n\tconst dispatch = useDispatch();\r\n\r\n\tif (tasks.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ButtonsBox>\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={isNoneDone}\r\n\t\t\t\tonClick={() => dispatch(toggleHideDone())}\r\n\t\t\t>\r\n\t\t\t\t{hideDone === false ? \"Ukryj ukończone\" : \"Pokaż wszystkie\"}\r\n\t\t\t</Button>\r\n\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={isEveryDone}\r\n\t\t\t\tonClick={() => dispatch(setEachDone())}\r\n\t\t\t>\r\n\t\t\t\tUkończ wszystkie\r\n\t\t\t</Button>\r\n\t\t</ButtonsBox>\t\r\n\t)\r\n};\r\nexport default Buttons;","import styled from 'styled-components';\r\n\r\nexport const StyledSection = styled.section`\r\n    padding: 10px;\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    display: flex;\r\n    margin: 0 0 3px;\r\n    background-color: white;\r\n\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0 0 3px;\r\n    padding: 15px 30px;\r\n    background-color: white;\r\n    flex-grow: 1;\r\n    display: flex;\r\n\r\n    @media (max-width: 768px) {\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nexport const TasksWrapper = styled.div`\r\n    background-color: white;\r\n    font-style: italic;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 400px) {\r\n        font-size: 12px;\r\n        padding: 10px 0;\r\n    }\r\n`;\r\n\r\n\r\n","import React from \"react\";\r\nimport { StyledSection, Header, Title, TasksWrapper } from './styled';\r\n\r\nconst Section = ({ title, body, extraContent }) => {\r\n\r\n  return (\r\n    <StyledSection>\r\n      <Header>\r\n        <Title>{title}</Title>                  \r\n        {extraContent}\r\n      </Header>\r\n      <TasksWrapper>\r\n      \t{body}\r\n      </TasksWrapper>\r\n    </StyledSection>\r\n)\r\n};\r\n\r\nexport default Section;","import styled from 'styled-components';\r\n\r\nexport const StyledTitle = styled.h1`\r\n    padding: 0 10px;\r\n    margin: 0;\r\n    font-size: 40px;\r\n    @media (max-width: 768px) {\r\n        font-size: 28px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledTitle } from './styled';\r\n\r\nconst Header =  ({title}) => (\r\n    <header>\r\n        <StyledTitle>{title}</StyledTitle>\r\n    </header>\r\n);\r\n\r\nexport default Header; ","import styled from 'styled-components';\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 5px;\r\n    position: absolute;\r\n    width: 100%;\r\n    left: 0;\r\n    top: 100%;\r\n    transform: translateY(-100%);\r\n    font-size: 12px;\r\n    text-align: center;\r\n`;","import React from 'react';\r\nimport { StyledFooter } from './styled';\r\n\r\nconst Footer = ({content}) => (\r\n    <StyledFooter>{content}</StyledFooter>\r\n);\r\n\r\nexport default Footer;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    max-width: 1000px;\r\n    min-height: 100vh;\r\n    padding: 40px 20px;\r\n    margin: 0 auto;\r\n`;","import React from 'react';\r\nimport { Wrapper } from './styled';\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ButtonsBox, Button } from '../../styledButtons';\r\nimport { fetchExampleTasks, selectIsExampleTaskLoading, selectIsOutOfExamples } from '../tasksSlice';\r\n\r\nexport const ExampleTasksButton = () => {\r\n\tconst dispatch = useDispatch(); \r\n\tconst loading = useSelector(selectIsExampleTaskLoading);\r\n\tconst outOfExamples = useSelector(selectIsOutOfExamples);\r\n\r\n\t\r\n    return (\r\n\t\t<ButtonsBox>\r\n\t\t\t<Button \r\n\t\t\t\tdisabled={loading || outOfExamples}\t\r\n\t\t\t\tonClick={() => dispatch(fetchExampleTasks())}\r\n\t\t\t>\r\n\t\t\t\t{loading ? 'Ładowanie...' : \r\n\t\t\t\t outOfExamples ? 'Nie ma więcej zadań do pobrania😞' : 'Pobierz losowe zadanie'}\r\n\t\t\t</Button>\r\n\t\t</ButtonsBox>\t\r\n\t)\r\n};","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    padding: 0px 15px;\r\n`;\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Input } from \"../Input\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport const Search = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const query = new URLSearchParams(location.search).get(\"szukaj\");\r\n\r\n  const onInputChange = ({ target }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (target.value.trim() === \"\") {\r\n      searchParams.delete(\"szukaj\");\r\n    } else {\r\n      searchParams.set(\"szukaj\", target.value);\r\n    }\r\n\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport Form from './Form';\nimport TaskList from './TaskList';\nimport Buttons from './TaskHandlingButtons';\nimport Section from '../../../common/Section';\nimport Header from '../../../common/Header';\nimport Footer from '../../../common/Footer';\nimport Container from '../../../common/Container';\nimport { selectAreTasks } from './tasksSlice';\nimport { ExampleTasksButton } from './ExampleTasksButton';\nimport { Search } from './Search';\n\n\nexport const Tasks = () => {\n  const areTasks = useSelector(selectAreTasks);\n\n  return (\n    <Container>\n        <Header title=\"Lista zadań\"/>\n        <Section \n          title=\"Dodaj nowe zadanie\"\n          body={<Form />}\n          extraContent={<ExampleTasksButton />}\n        />\n        {areTasks ?\n          <Section \n          title=\"Filtruj zadania\"\n          body={<Search />} \n        /> : \"\"\n        }\n        <Section\n          title=\"Lista zadań\"\n          body={areTasks ? \n            <TaskList />\n               : `Nie masz na razie żadnych zadań.`}\n            extraContent={\n            <Buttons />\n            }\n        />\n        <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\n    </Container>\n  );\n}\n","import React from 'react';\r\nimport Container from '../../common/Container';\r\nimport Footer from '../../common/Footer';\r\nimport Header from '../../common/Header';\r\nimport Section from '../../common/Section';\r\n\r\nexport const Author = () => {\r\n    return (\r\n        <Container>\r\n        <Header title=\"O autorze\"/>\r\n        <Section \r\n          title=\"Krzysztof Kwieciński\"\r\n          body={\"Strona w budowie 👷‍♂️\"}\r\n        />\r\n\r\n        <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\r\n    </Container>\r\n    )\r\n};","import React from \"react\";\r\nimport { NavigationBar, NavigationItem, StyledNavLink } from \"./styled\";\r\n\r\n\r\n\r\nexport const Nav = () => {\r\n  return (\r\n    <NavigationBar>\r\n        <NavigationItem>\r\n          <StyledNavLink to=\"/zadania\"> Zadania </StyledNavLink>\r\n        </NavigationItem>\r\n        <NavigationItem>\r\n          <StyledNavLink to=\"/autor\"> O autorze </StyledNavLink>\r\n        </NavigationItem>\r\n    </NavigationBar>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const TaskHeader = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 0 0 3px;\r\n    background-color: white;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 15px;\r\n    }\r\n`;\r\n\r\nexport const TaskContentForm = styled.form`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    margin-right: 5px;\r\n`;\r\n\r\nexport const ContentInput = styled.input`\r\n    flex-grow: 2;\r\n    padding: 5px;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    border: none;\r\n    \r\n    &:focus {\r\n        outline: none;\r\n        background-color: #eee;\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nexport const EditButton = styled.button`\r\n    font-size: 12px;\r\n    margin: 0 5px;\r\n    background-color: white;\r\n    color: #666;\r\n    border: none;\r\n    transition: .3s ease;\r\n\r\n    &:hover {\r\n        filter: brightness(1.2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TaskSpan = styled.span`\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n    font-style: italic;\r\n    align-self: center;\r\n`;\r\n\r\nexport const TaskDetail = styled.section`\r\n    background-color: white;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const DetailForm = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    margin: 5px 0 15px;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const TextArea = styled.textarea`\r\n    resize: none;\r\n    margin: 10px 0;\r\n    padding: 10px 5px;\r\n    background-color: white;\r\n    border: none;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        background-color: #eee;\r\n    }\r\n`;\r\nexport const DoneButton = styled.button`\r\n    border: none;\r\n    transition: .3s ease;\r\n    background-color: transparent;\r\n\r\n    &:hover {\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation, useParams } from \"react-router-dom\";\r\nimport Container from \"../../../common/Container\";\r\nimport Footer from \"../../../common/Footer\";\r\nimport { StyledSection } from \"../../../common/Section/styled\";\r\nimport {\r\n  changeTaskDetail,\r\n  changeTaskContent,\r\n  selectTaskByID,\r\n  toggleTaskDone,\r\n} from \"../TasksPage/tasksSlice\";\r\nimport {\r\n  EditButton,\r\n  DoneButton,\r\n  TaskContentForm,\r\n  TaskSpan,\r\n  TaskDetail,\r\n  TaskHeader,\r\n  DetailForm,\r\n  TextArea,\r\n  ContentInput,\r\n} from \"./styled\";\r\n\r\nexport const SingleTaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => selectTaskByID(state, id));\r\n  if(task === undefined){\r\n    window.location = window.location.origin;\r\n  };\r\n  const { content, done, date, detail } = task;\r\n  const [taskDetail, setTaskDetail] = useState(detail);\r\n  const [taskContent, setTaskContent] = useState(content);\r\n  const textarea = useRef(null);\r\n  const input = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(changeTaskDetail({ id, detailContent: taskDetail }));\r\n    dispatch(changeTaskContent({ id, taskContent: taskContent }));\r\n  }, [taskDetail, taskContent]);\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedTask = taskContent.trim();\r\n    document.activeElement.blur();\r\n    if(!trimmedTask){\r\n      setTaskContent(\"Zadanie bez nazwy\")\r\n    } else {\r\n      setTaskContent(trimmedTask)\r\n    }\r\n    \r\n  };\r\n\r\n  const changeDetailContent = (event) => {\r\n    setTaskDetail(event.target.value);\r\n  };\r\n  const changeTaskTitleContent = (event) => {\r\n    setTaskContent(event.target.value);\r\n  };\r\n  return (\r\n    <Container>\r\n      <StyledSection>\r\n        <TaskHeader>\r\n          <TaskContentForm onSubmit={onFormSubmit}>\r\n            <EditButton type=\"button\" onClick={() => input.current.focus()}>\r\n              <i class=\"fas fa-pencil-alt\"></i>\r\n            </EditButton>\r\n            <ContentInput\r\n              value={taskContent}\r\n              type=\"text\"\r\n              ref={input}\r\n              onChange={changeTaskTitleContent}\r\n            />\r\n          </TaskContentForm>\r\n\r\n          <TaskSpan>Dodano: {date}</TaskSpan>\r\n        </TaskHeader>\r\n        <TaskDetail>\r\n          <TaskSpan>Szczegóły zadania: </TaskSpan>\r\n          <EditButton onClick={() => textarea.current.focus()}>\r\n            <i class=\"fas fa-pencil-alt\"></i>\r\n          </EditButton>\r\n          <DetailForm onSubmit={onFormSubmit}>\r\n            <TextArea\r\n              ref={textarea}\r\n              rows={6}\r\n              placeholder={\"Nie dodano szczegółów.\"}\r\n              value={taskDetail}\r\n              onChange={changeDetailContent}\r\n              type=\"text\"\r\n            />\r\n          </DetailForm>\r\n\r\n          <TaskSpan>\r\n            Ukończone:{\" \"}\r\n            <DoneButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n              {done ? \"tak\" : \"nie\"}\r\n            </DoneButton>{\" \"}\r\n          </TaskSpan>\r\n        </TaskDetail>\r\n      </StyledSection>\r\n      <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\r\n    </Container>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Tasks } from './features/tasks/TasksPage/index';\r\nimport { Author } from './features/author/index'\r\nimport { Nav } from './common/Nav';\r\nimport { SingleTaskPage } from './features/tasks/SingleTaskPage';\r\n\r\n\r\nexport default () => {\r\n    return (\r\n    <HashRouter>\r\n        <Nav/>\r\n        <Switch>\r\n            <Route path=\"/zadania/:id\">\r\n                <SingleTaskPage />\r\n            </Route>\r\n            <Route path=\"/zadania\">\r\n                <Tasks />\r\n            </Route>\r\n            <Route path=\"/autor\">\r\n                <Author />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n                <Redirect to=\"/zadania\"/>\r\n            </Route>\r\n        </Switch>\r\n    </HashRouter>\r\n    )\r\n    \r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        font-family: 'Roboto', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    } \r\n    body {\r\n        background-color: #eee;\r\n    }\r\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nexport const getExampleTasks = async () => {\r\n    const response = await fetch('/react-todoList/exampleTasks.json');\r\n\r\n    if(!response.ok) {\r\n        throw new Error(response.statusText)\r\n    }\r\n    return await response.json();\r\n};","import { call, put, delay, takeEvery, select } from 'redux-saga/effects';\r\nimport { getExampleTasks } from './getExampleTasks';\r\nimport { setLocalStorageData } from './localStorageData';\r\nimport { addExampleTasks, fetchExampleTasks, selectHideDone, selectTasks } from './tasksSlice';\r\n\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield delay(500);\r\n        yield put(addExampleTasks(exampleTasks))\r\n    } catch (error) {\r\n        yield call (alert, error)\r\n    }\r\n}\r\n\r\nfunction* saveToLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    const hideDone = yield select(selectHideDone);\r\n    yield call(setLocalStorageData, tasks, hideDone);\r\n};\r\n\r\nexport function* tasksSaga() {\r\n    yield takeEvery(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveToLocalStorageHandler);\r\n};","import { all } from 'redux-saga/effects';\r\nimport { tasksSaga } from './features/tasks/TasksPage/tasksSaga';\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n  };","import { configureStore } from '@reduxjs/toolkit';\r\nimport tasksReducer from './features/tasks/TasksPage/tasksSlice'\r\nimport createSagaMiddleWare from 'redux-saga';\r\nimport rootSaga from './rootSaga';\r\n\r\n\r\nconst sagaMiddleWare = createSagaMiddleWare();\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleWare],\r\n});\r\n\r\nsagaMiddleWare.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { GlobalStyle } from './GlobalStyle'\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle/>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}