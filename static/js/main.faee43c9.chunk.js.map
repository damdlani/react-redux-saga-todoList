{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Footer/index.js","Container/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trimmedTaskContent","trim","autoFocus","type","placeholder","value","onChange","target","Tasks","tasks","hideDone","toggleTaskDone","removeTask","map","task","key","id","done","onClick","content","Buttons","toggleHideDone","setEachDone","length","disabled","every","Section","title","body","extraContent","Header","Footer","Container","children","App","localTasks","JSON","parse","localStorage","getItem","localHideDone","setTasks","setItem","stringify","setHideDone","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.faee43c9.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const trimmedTaskContent = newTaskContent.trim();\r\n        if (trimmedTaskContent === \"\"){\r\n            return\r\n        };\r\n        addNewTask(trimmedTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n    const changeNewTaskContent = (event) => {\r\n        setNewTaskContent(event.target.value)\r\n    };\r\n\r\n    return <form\r\n        className=\"form\"\r\n        onSubmit={onFormSubmit}\r\n    >\r\n        <input\r\n            className=\"form__input\"\r\n            autoFocus\r\n            type=\"text\"\r\n            placeholder=\"Co jest do zrobienia?\"\r\n            value={newTaskContent}\r\n            onChange={changeNewTaskContent}\r\n        />\r\n        <button\r\n            className=\"form__submit \">\r\n            Dodaj zadanie\r\n                </button>\r\n    </form>\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({tasks, hideDone, toggleTaskDone, removeTask}) => (\r\n    <ul className=\"todo__ul \">\r\n        {tasks.map((task) => (\r\n            <li key={task.id}\r\n                className={`todo__task ${task.done && hideDone ? \" todo__hidden\" : \"\"}`}\r\n            >\r\n            <button \r\n            className=\"todo__button todo__button--check\"\r\n            onClick={() => {toggleTaskDone(task.id)}}\r\n            >\r\n            {task.done ? <i className=\"fas fa-check\"></i> : \"\"}\r\n            </button>\r\n\r\n            <span className={`todo__span ${task.done ? \"todo__span--done\" : \"\"}`}>\r\n            {task.content}\r\n            </span>\r\n\r\n            <button \r\n            className=\"todo__button todo__button--remove\"\r\n            onClick={() => {removeTask(task.id)}}\r\n            >\r\n            <i className=\"fas fa-trash-alt\"></i>\r\n            </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\"\r\nimport \"./style.css\"\r\n\r\nconst Buttons = ({tasks, hideDone, toggleHideDone, setEachDone}) => {\r\n\tif (tasks.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"buttons\">\r\n\t\r\n\t\t\t<button \r\n\t\t\tclassName=\"buttons__done\"\r\n\t\t\tdisabled={tasks.every(({ done }) => done === false)}\r\n\t\t\tonClick={toggleHideDone}\r\n\t\t\t>\r\n\t\t\t\t{hideDone === false ? \"Ukryj ukończone\" : \"Pokaż wszystkie\"}\r\n\t\t\t</button>\r\n\r\n\t\t\t<button \r\n\t\t\tclassName=\"buttons__done\" \r\n\t\t\tdisabled={tasks.every(({done}) => done)}\r\n\t\t\tonClick={setEachDone}\r\n\t\t\t>\r\n\t\t\t\tUkończ wszystkie\r\n\t\t\t</button>\r\n\r\n\t\t</div>\t\r\n\t)\r\n};\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({title, body, extraContent}) => (\r\n    <section className=\"todo__list\">\r\n      <div className=\"todo__header\">\r\n        <h2 className=\"todo__title\">{title}</h2>                  \r\n        {extraContent}\r\n      </div>\r\n      <div className=\"todo__tasks todo__empty\">\r\n      \t{body}\r\n      </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport './style.css';\r\n\r\nconst Header =  ({title}) => (\r\n    <header className=\"header\">\r\n        <h1 className=\"header__title\">{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header; ","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Footer = ({content}) => (\r\n    <footer className=\"footer\">{content}</footer>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Container = ({children}) => (\r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;","import React, { useState } from 'react';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport Section from './Section';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Container from './Container';\n\n\nfunction App() {\n\n  let localTasks = JSON.parse(localStorage.getItem(\"tasks\"));\n  let localHideDone = JSON.parse(localStorage.getItem(\"hideDone\"));\n  \n  const [tasks, setTasks] = useState(localTasks === null ? [] : localTasks);\n  localStorage.setItem(\"tasks\", JSON.stringify(tasks))\n\n  const [hideDone, setHideDone] = useState(localHideDone === null ? false : localHideDone);\n  localStorage.setItem(\"hideDone\", JSON.stringify(hideDone));\n  \n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);    \n  };\n  \n  const setEachDone = () => {\n    setTasks(tasks => tasks.map(\n      task => ({...task, done: true})\n    ))\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if(task.id === id) {\n        return {...task, done: !task.done};\n      }\n      \n      return task;\n\n    }));\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(\n      task => task.id !== id\n    ))\n  }\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [...tasks, {\n      id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n      content: content,\n      done: false\n      } \n    ]\n    )\n  } \n\n\n  return (\n    <Container>\n        <Header title=\"Lista zadań\"/>\n        <Section \n            title=\"Dodaj nowe zadanie\"\n            body={\n            <Form \n            addNewTask={addNewTask}\n            />\n            }\n            />\n\n            <Section\n            title=\"Lista zadań\"\n            body={tasks.length !== 0 ? \n              <Tasks \n                tasks={tasks} \n                hideDone={hideDone} \n                toggleTaskDone={toggleTaskDone} \n                removeTask={removeTask}\n              />\n               : `Nie masz na razie żadnych zadań.`}\n            extraContent={\n            <Buttons \n              tasks={tasks} \n              hideDone={hideDone} \n              toggleHideDone={toggleHideDone} \n              setEachDone={setEachDone}\n            />\n            }\n            />\n        <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}