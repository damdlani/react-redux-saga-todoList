{"version":3,"sources":["features/tasks/TasksPage/localStorageData.js","features/tasks/getDate.js","features/tasks/TasksPage/pushRandomTask.js","features/tasks/getRandomTask.js","features/tasks/TasksPage/tasksSlice.js","features/tasks/TasksPage/Form/styled.js","features/tasks/TasksPage/Input/index.js","features/tasks/TasksPage/Form/index.js","common/Nav/styled.js","features/tasks/TasksPage/queryParameters.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/searchQueryName.js","features/tasks/styledButtons.js","features/tasks/TasksPage/TaskHandlingButtons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/styled.js","common/Header/index.js","common/Footer/styled.js","common/Footer/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/ExampleTasksButton/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/index.js","common/Nav/index.js","features/tasks/SingleTaskPage/styled.js","features/tasks/SingleTaskPage/index.js","App.js","GlobalStyle.js","serviceWorker.js","features/tasks/TasksPage/getExampleTasks.js","features/tasks/TasksPage/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["setLocalStorageData","tasks","hideDone","localStorage","setItem","JSON","stringify","getDate","Date","toLocaleDateString","pushRandomTask","state","tasksArray","maxNumber","index","length","Math","floor","random","find","id","error","outOfExamples","push","date","tasksSlice","createSlice","name","initialState","parse","getItem","isExampleTaskLoading","isExampleTaskError","reducers","addTask","task","payload","removeTask","taskID","findIndex","splice","toggleTaskDone","done","toggleHideDone","setEachDone","fetchExampleTasksLoading","fetchExampleTasksSuccess","exampleTasks","fetchExampleTasksError","saveDataToLocal","changeTaskDetail","detail","detailContent","changeTaskContent","content","taskContent","actions","selectTasksState","selectTasks","selectHideDone","selectIsExampleTaskLoading","selectIsExampleTaskError","selectIsOutOfExamples","selectIsEveryDone","every","selectIsNoneDone","selectAreTasks","StyledForm","styled","form","Button","button","Input","input","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","inputFocus","current","focus","onSubmit","event","preventDefault","trimmedTaskContent","trim","nanoid","autoFocus","type","placeholder","ref","value","onChange","target","NavigationBar","div","NavigationItem","li","StyledNavLink","NavLink","attrs","activeClassName","css","useQueryParameter","paramName","location","useLocation","URLSearchParams","search","get","List","ul","ListItem","hidden","check","remove","edit","Span","span","TaskList","query","useSelector","filter","toUpperCase","includes","selectTaskByQuery","map","key","onClick","className","to","class","ButtonsBox","Buttons","isEveryDone","isNoneDone","disabled","StyledSection","section","Header","Title","h2","TasksWrapper","Section","title","body","extraContent","StyledTitle","h1","StyledFooter","footer","Footer","Wrapper","Container","children","ExampleTasksButton","loading","Search","replaceQueryParameter","history","useHistory","searchParams","set","delete","pathname","toString","useReplaceQueryParameter","undefined","Tasks","areTasks","Author","Nav","TaskHeader","TaskContentForm","ContentInput","EditButton","TaskSpan","TaskDetail","DetailForm","TextArea","textarea","DoneButton","SingleTaskPage","useParams","selectTaskByID","window","origin","taskDetail","setTaskDetail","setTaskContent","useEffect","onFormSubmit","trimmedTask","document","activeElement","blur","rows","path","exact","GlobalStyle","createGlobalStyle","Boolean","hostname","match","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveToLocalStorageHandler","tasksSaga","call","delay","put","select","takeEvery","rootSaga","all","sagaMiddleWare","createSagaMiddleWare","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.77aee8f1.chunk.js","sourcesContent":["const tasksKey = \"tasks\";\r\nconst hideDoneKey = \"hideDone\";\r\n\r\nexport const setLocalStorageData = (tasks, hideDone) => {\r\n  localStorage.setItem(tasksKey, JSON.stringify(tasks));\r\n  localStorage.setItem(hideDoneKey, JSON.stringify(hideDone));\r\n};\r\n\r\nexport const getLocalStorageTasks = () => {\r\n  return JSON.parse(localStorage.getItem(tasksKey)) || [];\r\n};\r\n\r\nexport const getLocalStorageHideDone = () => {\r\n  return JSON.parse(localStorage.getItem(hideDoneKey)) || false;\r\n};\r\n","export const getDate = () => new Date().toLocaleDateString();\r\n","import { getDate } from \"../getDate\";\r\nimport { getRandomIndex } from \"../getRandomTask\";\r\n\r\nexport const pushRandomTask = (state, tasksArray) => {\r\n  const index = getRandomIndex(tasksArray.length);\r\n\r\n  if (state.tasks.find(({ id }) => id === tasksArray[index].id)) {\r\n    try {\r\n      pushRandomTask(state, tasksArray);\r\n    } catch (error) {\r\n      state.outOfExamples = true;\r\n    }\r\n  } else {\r\n    state.tasks.push({ ...tasksArray[index], date: getDate() });\r\n  }\r\n};\r\n","export const getRandomIndex = (maxNumber) => {\r\n  return Math.floor(Math.random() * Math.floor(maxNumber));\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  getLocalStorageHideDone,\r\n  getLocalStorageTasks,\r\n  setLocalStorageData,\r\n} from \"./localStorageData\";\r\nimport { pushRandomTask } from \"./pushRandomTask\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getLocalStorageTasks(),\r\n    hideDone: getLocalStorageHideDone(),\r\n    isExampleTaskLoading: false,\r\n    isExampleTaskError: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskID }) => {\r\n      const index = tasks.findIndex((task) => task.id === taskID);\r\n      tasks.splice(index, 1);\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskID }) => {\r\n      const index = tasks.findIndex((task) => task.id === taskID);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    setEachDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasksLoading: (state) => {\r\n      state.isExampleTaskLoading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: exampleTasks }) => {\r\n      state.isExampleTaskLoading = false;\r\n\r\n      pushRandomTask(state, exampleTasks);\r\n    },\r\n    fetchExampleTasksError: (state) => {\r\n      state.isExampleTaskLoading = false;\r\n      state.isExampleTaskError = true;\r\n    },\r\n    saveDataToLocal: (state) => {\r\n      setLocalStorageData(state.tasks, state.hideDone);\r\n    },\r\n    changeTaskDetail: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex((task) => task.id === payload.id);\r\n      tasks[index].detail = payload.detailContent;\r\n    },\r\n    changeTaskContent: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex((task) => task.id === payload.id);\r\n      tasks[index].content = payload.taskContent;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  removeTask,\r\n  toggleTaskDone,\r\n  toggleHideDone,\r\n  setEachDone,\r\n  fetchExampleTasksLoading,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n  saveDataToLocal,\r\n  changeTaskDetail,\r\n  changeTaskContent,\r\n} = tasksSlice.actions;\r\n\r\nexport const selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectIsExampleTaskLoading = (state) =>\r\n  selectTasksState(state).isExampleTaskLoading;\r\nexport const selectIsExampleTaskError = (state) =>\r\n  selectTasksState(state).isExampleTaskError;\r\nexport const selectIsOutOfExamples = (state) =>\r\n  selectTasksState(state).outOfExamples;\r\nexport const selectIsEveryDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\nexport const selectIsNoneDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done === false);\r\nexport const selectAreTasks = (state) => selectTasks(state).length > 0;\r\n\r\nexport const selectTaskByID = (state, taskID) =>\r\n  selectTasks(state).find(({ id }) => id === taskID);\r\n\r\nexport const selectTaskByQuery = (state, query) => {\r\n  if (!query || query.trim() === \"\") {\r\n    return selectTasks(state);\r\n  }\r\n  return selectTasks(state).filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding: 0 15px;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px 20px;\r\n    margin: 5px;\r\n    background-color: teal;\r\n    border: none;\r\n    color: white;\r\n    font-size: 16px;\r\n    transition: .3s;\r\n    align-self: flex-start;\r\n    \r\n    &:hover {\r\n    cursor: pointer;\r\n    color: #ddd;\r\n    transform: scale(1.05)\r\n    }\r\n\r\n    &:active {\r\n    color: black;\r\n    outline: none;\r\n    }\r\n    &:disabled {\r\n        display: none;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n        width: 100%;\r\n        padding: 10px;\r\n        font-size: 14px;\r\n    }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n  flex-grow: 1;\r\n  margin: 5px;\r\n  padding: 5px 5px 5px 10px;\r\n\r\n  @media (max-width: 330px) {\r\n    &::placeholder {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { StyledForm, Button } from \"./styled\";\r\nimport { getDate } from \"../../getDate\";\r\nimport { Input } from \"../Input\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedTaskContent = newTaskContent.trim();\r\n\r\n    if (trimmedTaskContent === \"\") {\r\n      return;\r\n    }\r\n    dispatch(\r\n      addTask({\r\n        content: trimmedTaskContent,\r\n        done: false,\r\n        date: getDate(),\r\n        detail: \"\",\r\n        id: nanoid(),\r\n      })\r\n    );\r\n    setNewTaskContent(\"\");\r\n    inputFocus();\r\n  };\r\n  const changeNewTaskContent = (event) => {\r\n    setNewTaskContent(event.target.value);\r\n  };\r\n  const inputFocus = () => {\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        autoFocus\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        ref={inputRef}\r\n        value={newTaskContent}\r\n        onChange={changeNewTaskContent}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from 'styled-components';\r\nimport {\r\n    NavLink\r\n} from 'react-router-dom';\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const NavigationBar = styled.div `\r\n    background-color: white;\r\n    width: 100%;\r\n    height: 8vh;\r\n    margin: 0;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    list-style: none;\r\n`;\r\nexport const NavigationItem = styled.li `\r\n    margin: 10px;\r\n`;\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n\r\n    &.${activeClassName} {\r\n        border-bottom: solid 2px hsl(180, 66%, 20%);\r\n    }\r\n    color: black;\r\n    text-decoration: none;\r\n    \r\n    ${({button}) => !button && css`\r\n        color: hsl(180, 66%, 20%);\r\n        text-decoration: none;\r\n        font-size: 18px;\r\n        padding: 10px 10px 5px 10px;\r\n        transition: .3s ease;\r\n    `}\r\n\r\n    &:hover {\r\n        filter: brightness(1.5)\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 16px;\r\n    }\r\n`;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (paramName) => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n\r\n  return searchParams.get(paramName);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (!value) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n\r\n    history.push(`${location.pathname}?${searchParams.toString()}`);\r\n  };\r\n};\r\n","import styled, { css } from 'styled-components';\r\n\r\nexport const List = styled.ul`\r\n    padding: 15px;\r\n    margin: 0;\r\n    list-style: none;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 5px;\r\n    }\r\n`;\r\n\r\nexport const ListItem = styled.ul`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 15px 10px;\r\n    margin: 10px;\r\n    border-bottom: 1px solid #ccc;\r\n\r\n    ${({hidden}) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    flex-shrink: 0;\r\n    width: 35px;\r\n    align-self: center;\r\n    height: 35px;\r\n    padding: 10px;\r\n    display: flex;\r\n    font-size: 14px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: none;\r\n    outline: none;\r\n    transition: .3s;\r\n\r\n    @media (max-width: 768px) {\r\n        width: 25px;\r\n        height: 25px;\r\n        font-size: 10px;\r\n    }\r\n\r\n    &:focus {\r\n    outline: solid black 1px;\r\n    }\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n        filter: brightness(1.2)\r\n    }\r\n\r\n    ${({check}) => check && css`\r\n        background-color: rgb(5, 104, 10);\r\n\r\n    `}\r\n\r\n    ${({remove}) => remove && css`\r\n        background-color: rgb(104, 5, 5);\r\n\r\n        @media (max-width: 400px) {\r\n            font-size: 12px;\r\n        }\r\n    `}\r\n    ${({edit}) => edit && css`\r\n        background-color: rgb(233, 199, 1);\r\n        margin-right: 5px;\r\n\r\n        @media (max-width: 400px) {\r\n            font-size: 12px;\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const Span = styled.span`\r\n    text-align: justify;\r\n    padding: 5px 20px;\r\n    flex-grow: 1;\r\n    line-break: anywhere;\r\n    font-style: normal;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 10px;\r\n    }\r\n\r\n    ${({done}) => done && css`\r\n        text-decoration: line-through;\r\n        font-style: italic;\r\n    `}\r\n`;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledNavLink } from \"../../../../common/Nav/styled\";\r\nimport { useQueryParameter } from \"../queryParameters\";\r\nimport { searchQueryParamName } from \"../searchQueryName\";\r\nimport {\r\n  removeTask,\r\n  toggleTaskDone,\r\n  selectHideDone,\r\n  selectTaskByQuery,\r\n} from \"../tasksSlice\";\r\nimport { List, ListItem, Button, Span } from \"./styled\";\r\n\r\nconst TaskList = () => {\r\n  const dispatch = useDispatch();\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const tasks = useSelector((state) => selectTaskByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <ListItem key={task.id} hidden={task.done && hideDone}>\r\n          <Button check onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? <i className=\"fas fa-check\"></i> : \"\"}\r\n          </Button>\r\n\r\n          <Span done={task.done}>\r\n            <StyledNavLink to={`/zadania/${task.id}`}>\r\n              {task.content}\r\n            </StyledNavLink>\r\n          </Span>\r\n\r\n          <StyledNavLink button to={`/zadania/${task.id}`}>\r\n            <Button edit>\r\n              <i class=\"fas fa-pencil-alt\"></i>\r\n            </Button>\r\n          </StyledNavLink>\r\n\r\n          <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n            <i className=\"fas fa-trash-alt\"></i>\r\n          </Button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","export const searchQueryParamName = \"szukaj\";\r\n","import styled from \"styled-components\";\r\n\r\nexport const ButtonsBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  flex-grow: 1;\r\n  padding: 0px;\r\n  margin: 0 10px;\r\n  border: none;\r\n  background-color: transparent;\r\n  color: hsl(180, 66%, 20%);\r\n  font-size: 18px;\r\n  transition: color 0.2s, transform 0.2s;\r\n\r\n  &:hover {\r\n    color: hsl(180, 66%, 40%);\r\n    cursor: pointer;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.9);\r\n    outline: none;\r\n  }\r\n\r\n  &:disabled {\r\n    color: hsl(0, 0%, 60%);\r\n    cursor: auto;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n    color: hsl(180, 66%, 40%);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    padding: 10px;\r\n  }\r\n\r\n  @media (max-width: 400px) {\r\n    font-size: 14px;\r\n    padding: 5px;\r\n    margin: 5px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  toggleHideDone,\r\n  setEachDone,\r\n  selectTasks,\r\n  selectHideDone,\r\n  selectIsEveryDone,\r\n  selectIsNoneDone,\r\n} from \"../tasksSlice\";\r\nimport { ButtonsBox, Button } from \"../../styledButtons\";\r\n\r\nconst Buttons = () => {\r\n  const tasks = useSelector(selectTasks);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const isEveryDone = useSelector(selectIsEveryDone);\r\n  const isNoneDone = useSelector(selectIsNoneDone);\r\n  const dispatch = useDispatch();\r\n\r\n  if (tasks.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ButtonsBox>\r\n      <Button disabled={isNoneDone} onClick={() => dispatch(toggleHideDone())}>\r\n        {hideDone === false ? \"Ukryj ukończone\" : \"Pokaż wszystkie\"}\r\n      </Button>\r\n\r\n      <Button disabled={isEveryDone} onClick={() => dispatch(setEachDone())}>\r\n        Ukończ wszystkie\r\n      </Button>\r\n    </ButtonsBox>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledSection = styled.section`\r\n    padding: 10px;\r\n    margin: 10px 0;\r\n`;\r\n\r\nexport const Header = styled.div`\r\n    display: flex;\r\n    margin: 0 0 3px;\r\n    background-color: white;\r\n\r\n    @media (max-width: 768px) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    margin: 0 0 3px;\r\n    padding: 15px 30px;\r\n    background-color: white;\r\n    flex-grow: 1;\r\n    display: flex;\r\n\r\n    @media (max-width: 768px) {\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nexport const TasksWrapper = styled.div`\r\n    background-color: white;\r\n    font-style: italic;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 400px) {\r\n        font-size: 12px;\r\n        padding: 10px 0;\r\n    }\r\n`;\r\n\r\n\r\n","import React from \"react\";\r\nimport { StyledSection, Header, Title, TasksWrapper } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraContent }) => {\r\n  return (\r\n    <StyledSection>\r\n      <Header>\r\n        <Title>{title}</Title>\r\n        {extraContent}\r\n      </Header>\r\n      <TasksWrapper>{body}</TasksWrapper>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledTitle = styled.h1`\r\n    padding: 0 10px;\r\n    margin: 0;\r\n    font-size: 40px;\r\n    @media (max-width: 768px) {\r\n        font-size: 28px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledTitle } from \"./styled\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <StyledTitle>{title}</StyledTitle>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledFooter = styled.footer`\r\n    padding: 5px;\r\n    position: absolute;\r\n    width: 100%;\r\n    left: 0;\r\n    top: 100%;\r\n    transform: translateY(-100%);\r\n    font-size: 12px;\r\n    text-align: center;\r\n`;","import React from \"react\";\r\nimport { StyledFooter } from \"./styled\";\r\n\r\nconst Footer = ({ content }) => <StyledFooter>{content}</StyledFooter>;\r\n\r\nexport default Footer;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    position: relative;\r\n    width: 100%;\r\n    max-width: 1000px;\r\n    min-height: 100vh;\r\n    padding: 40px 20px;\r\n    margin: 0 auto;\r\n`;","import React from 'react';\r\nimport { Wrapper } from './styled';\r\n\r\nconst Container = ({children}) => (\r\n    <Wrapper>\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ButtonsBox, Button } from \"../../styledButtons\";\r\nimport {\r\n  fetchExampleTasksLoading,\r\n  selectIsExampleTaskLoading,\r\n  selectIsOutOfExamples,\r\n  selectIsExampleTaskError,\r\n} from \"../tasksSlice\";\r\n\r\nexport const ExampleTasksButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectIsExampleTaskLoading);\r\n  const error = useSelector(selectIsExampleTaskError);\r\n  const outOfExamples = useSelector(selectIsOutOfExamples);\r\n\r\n  return (\r\n    <ButtonsBox>\r\n      <Button\r\n        disabled={loading || outOfExamples}\r\n        onClick={() => dispatch(fetchExampleTasksLoading())}\r\n      >\r\n        {loading\r\n          ? \"Ładowanie...\"\r\n          : outOfExamples\r\n          ? \"Nie ma więcej zadań do pobrania😞\"\r\n          : error\r\n          ? \"Nie udało się pobrać zadania 😵\"\r\n          : \"Pobierz losowe zadanie\"}\r\n      </Button>\r\n    </ButtonsBox>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    padding: 0px 15px;\r\n`;\r\n","import React from \"react\";\r\nimport { Input } from \"../Input\";\r\nimport {\r\n  useQueryParameter,\r\n  useReplaceQueryParameter,\r\n} from \"../queryParameters\";\r\nimport { searchQueryParamName } from \"../searchQueryName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport const Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() === \"\" ? undefined : target.value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./TaskHandlingButtons\";\nimport Section from \"../../../common/Section\";\nimport Header from \"../../../common/Header\";\nimport Footer from \"../../../common/Footer\";\nimport Container from \"../../../common/Container\";\nimport { selectAreTasks } from \"./tasksSlice\";\nimport { ExampleTasksButton } from \"./ExampleTasksButton\";\nimport { Search } from \"./Search\";\n\nexport const Tasks = () => {\n  const areTasks = useSelector(selectAreTasks);\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form />}\n        extraContent={<ExampleTasksButton />}\n      />\n      {areTasks ? <Section title=\"Filtruj zadania\" body={<Search />} /> : \"\"}\n      <Section\n        title=\"Lista zadań\"\n        body={areTasks ? <TaskList /> : `Nie masz na razie żadnych zadań.`}\n        extraContent={<Buttons />}\n      />\n      <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\n    </Container>\n  );\n};\n","import React from \"react\";\r\nimport Container from \"../../common/Container\";\r\nimport Footer from \"../../common/Footer\";\r\nimport Header from \"../../common/Header\";\r\nimport Section from \"../../common/Section\";\r\n\r\nexport const Author = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"O autorze\" />\r\n      <Section title=\"Krzysztof Kwieciński\" body={\"Strona w budowie 👷‍♂️\"} />\r\n\r\n      <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { NavigationBar, NavigationItem, StyledNavLink } from \"./styled\";\r\n\r\nexport const Nav = () => {\r\n  return (\r\n    <NavigationBar>\r\n      <NavigationItem>\r\n        <StyledNavLink to=\"/zadania\"> Zadania </StyledNavLink>\r\n      </NavigationItem>\r\n      <NavigationItem>\r\n        <StyledNavLink to=\"/autor\"> O autorze </StyledNavLink>\r\n      </NavigationItem>\r\n    </NavigationBar>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const TaskHeader = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 0 0 3px;\r\n    background-color: white;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 768px) {\r\n        padding: 15px;\r\n    }\r\n`;\r\n\r\nexport const TaskContentForm = styled.form`\r\n    flex-grow: 1;\r\n    display: flex;\r\n    margin-right: 5px;\r\n`;\r\n\r\nexport const ContentInput = styled.input`\r\n    flex-grow: 2;\r\n    padding: 5px;\r\n    font-size: 24px;\r\n    font-weight: bold;\r\n    border: none;\r\n    \r\n    &:focus {\r\n        outline: none;\r\n        background-color: #eee;\r\n    }\r\n    @media (max-width: 768px) {\r\n        font-size: 18px;\r\n    }\r\n`;\r\n\r\nexport const EditButton = styled.button`\r\n    font-size: 12px;\r\n    margin: 0 5px;\r\n    background-color: white;\r\n    color: #666;\r\n    border: none;\r\n    transition: .3s ease;\r\n\r\n    &:hover {\r\n        filter: brightness(1.2);\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nexport const TaskSpan = styled.span`\r\n    margin-top: 10px;\r\n    font-weight: bold;\r\n    font-style: italic;\r\n    align-self: center;\r\n`;\r\n\r\nexport const TaskDetail = styled.section`\r\n    background-color: white;\r\n    padding: 20px;\r\n`;\r\n\r\nexport const DetailForm = styled.form`\r\n    width: 100%;\r\n    display: flex;\r\n    margin: 5px 0 15px;\r\n    flex-direction: column;\r\n`;\r\n\r\nexport const TextArea = styled.textarea`\r\n    resize: none;\r\n    margin: 10px 0;\r\n    padding: 10px 5px;\r\n    background-color: white;\r\n    border: none;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        background-color: #eee;\r\n    }\r\n`;\r\nexport const DoneButton = styled.button`\r\n    border: none;\r\n    transition: .3s ease;\r\n    background-color: transparent;\r\n\r\n    &:hover {\r\n        font-weight: bold;\r\n        cursor: pointer;\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Container from \"../../../common/Container\";\r\nimport Footer from \"../../../common/Footer\";\r\nimport { StyledSection } from \"../../../common/Section/styled\";\r\nimport {\r\n  changeTaskDetail,\r\n  changeTaskContent,\r\n  selectTaskByID,\r\n  toggleTaskDone,\r\n} from \"../TasksPage/tasksSlice\";\r\nimport {\r\n  EditButton,\r\n  DoneButton,\r\n  TaskContentForm,\r\n  TaskSpan,\r\n  TaskDetail,\r\n  TaskHeader,\r\n  DetailForm,\r\n  TextArea,\r\n  ContentInput,\r\n} from \"./styled\";\r\n\r\nexport const SingleTaskPage = () => {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => selectTaskByID(state, id));\r\n  if (task === undefined) {\r\n    window.location = window.location.origin;\r\n  }\r\n  const { content, done, date, detail } = task;\r\n  const [taskDetail, setTaskDetail] = useState(detail);\r\n  const [taskContent, setTaskContent] = useState(content);\r\n  const textarea = useRef(null);\r\n  const input = useRef(null);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(changeTaskDetail({ id, detailContent: taskDetail }));\r\n    dispatch(changeTaskContent({ id, taskContent: taskContent }));\r\n  }, [taskDetail, taskContent]);\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    const trimmedTask = taskContent.trim();\r\n    document.activeElement.blur();\r\n    if (!trimmedTask) {\r\n      setTaskContent(\"Zadanie bez nazwy\");\r\n    } else {\r\n      setTaskContent(trimmedTask);\r\n    }\r\n  };\r\n\r\n  const changeDetailContent = (event) => {\r\n    setTaskDetail(event.target.value);\r\n  };\r\n  const changeTaskTitleContent = (event) => {\r\n    setTaskContent(event.target.value);\r\n  };\r\n  return (\r\n    <Container>\r\n      <StyledSection>\r\n        <TaskHeader>\r\n          <TaskContentForm onSubmit={onFormSubmit}>\r\n            <EditButton type=\"button\" onClick={() => input.current.focus()}>\r\n              <i class=\"fas fa-pencil-alt\"></i>\r\n            </EditButton>\r\n            <ContentInput\r\n              value={taskContent}\r\n              type=\"text\"\r\n              ref={input}\r\n              onChange={changeTaskTitleContent}\r\n            />\r\n          </TaskContentForm>\r\n\r\n          <TaskSpan>Dodano: {date}</TaskSpan>\r\n        </TaskHeader>\r\n        <TaskDetail>\r\n          <TaskSpan>Szczegóły zadania: </TaskSpan>\r\n          <EditButton onClick={() => textarea.current.focus()}>\r\n            <i class=\"fas fa-pencil-alt\"></i>\r\n          </EditButton>\r\n          <DetailForm onSubmit={onFormSubmit}>\r\n            <TextArea\r\n              ref={textarea}\r\n              rows={6}\r\n              placeholder={\"Nie dodano szczegółów.\"}\r\n              value={taskDetail}\r\n              onChange={changeDetailContent}\r\n              type=\"text\"\r\n            />\r\n          </DetailForm>\r\n\r\n          <TaskSpan>\r\n            Ukończone:{\" \"}\r\n            <DoneButton onClick={() => dispatch(toggleTaskDone(id))}>\r\n              {done ? \"tak\" : \"nie\"}\r\n            </DoneButton>{\" \"}\r\n          </TaskSpan>\r\n        </TaskDetail>\r\n      </StyledSection>\r\n      <Footer content=\"&copy;Krzysztof Kwieciński 2020\" />\r\n    </Container>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { Tasks } from \"./features/tasks/TasksPage/index\";\r\nimport { Author } from \"./features/author/index\";\r\nimport { Nav } from \"./common/Nav\";\r\nimport { SingleTaskPage } from \"./features/tasks/SingleTaskPage\";\r\n\r\nexport default () => {\r\n  return (\r\n    <HashRouter>\r\n      <Nav />\r\n      <Switch>\r\n        <Route path=\"/zadania/:id\">\r\n          <SingleTaskPage />\r\n        </Route>\r\n        <Route path=\"/zadania\">\r\n          <Tasks />\r\n        </Route>\r\n        <Route path=\"/autor\">\r\n          <Author />\r\n        </Route>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/zadania\" />\r\n        </Route>\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n};\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n        font-family: 'Roboto', sans-serif;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    } \r\n    body {\r\n        background-color: #eee;\r\n    }\r\n`;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/react-todoList/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    throw new Error(response.statusText);\r\n  }\r\n  return await response.json();\r\n};\r\n","import { call, put, delay, takeEvery, select } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { setLocalStorageData } from \"./localStorageData\";\r\nimport {\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksLoading,\r\n  selectHideDone,\r\n  selectTasks,\r\n  fetchExampleTasksError,\r\n} from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield delay(500);\r\n    yield put(fetchExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield put(fetchExampleTasksError());\r\n  }\r\n}\r\n\r\nfunction* saveToLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  const hideDone = yield select(selectHideDone);\r\n  yield call(setLocalStorageData, tasks, hideDone);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeEvery(fetchExampleTasksLoading.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveToLocalStorageHandler);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/TasksPage/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([tasksSaga()]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/TasksPage/tasksSlice\";\r\nimport createSagaMiddleWare from \"redux-saga\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleWare = createSagaMiddleWare();\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleWare],\r\n});\r\n\r\nsagaMiddleWare.run(rootSaga);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}